// Generated by CoffeeScript 1.6.3
/*
  KENZO - Eyes, October
  canvas animation by chris.shier@gmail.com http://csh.bz
*/


(function() {
  'use strict';
  var Bloop, animloop, brush_mod, centerContextOrigin, clear, cos, decay, degToRad, distance, fps, fpsFilter, fps_now, handleResize, hsla, hypotenuse, imageSmoothing, initBrush, initCanvas, initConfig, initImage, initMouse, initWallpaper, keyPress, lastUpdate, last_zoom, paintimg, radToDeg, resetContextOrigin, rotation, sin, sizeCanvas, sizeCanvasesToWindow, startAnimation, tan, tilt, time, zoom, zoomed_count;

  brush_mod = 0;

  time = 0;

  sin = function(a) {
    return Math.sin(a);
  };

  cos = function(a) {
    return Math.cos(a);
  };

  tan = function(a) {
    return Math.tan(a);
  };

  distance = function(x1, x2, y1, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  };

  radToDeg = function(rad) {
    return rad / (Math.PI / 180);
  };

  degToRad = function(deg) {
    return deg * (Math.PI / 180);
  };

  hypotenuse = function(a, b) {
    return Math.sqrt(a * a + b * b);
  };

  rotation = function(x1, x2, y1, y2) {
    var dx, dy;
    dx = x2 - x1;
    dy = y2 - y1;
    if (dx < 0) {
      return Math.atan(dy / dx);
    } else {
      return Math.PI + Math.atan(dy / dx);
    }
  };

  initMouse = function() {
    window.Mouse = {
      x: 0,
      y: canvas.bottom / 2,
      xs: 0,
      ys: canvas.bottom / 2,
      xa: -1,
      xb: -1,
      ya: -1,
      yb: -1,
      xUp: 0,
      yUp: canvas.bottom / 2,
      up: true,
      down: false,
      clicks: 0,
      points: [],
      downTime: 0,
      events: {
        up: function(e) {
          Mouse.up = true;
          Mouse.down = !Mouse.up;
          Mouse.downTime = 0;
          Mouse.xUp = Mouse.x;
          Mouse.yUp = Mouse.y;
          return canvas.style.cursor = 'pointer';
        },
        down: function(e) {
          e.preventDefault();
          Mouse.clicks++;
          Mouse.down = true;
          Mouse.up = !Mouse.down;
          return canvas.style.cursor = 'none';
        },
        move: function(e) {
          if ('touches' in e) {
            e.preventDefault();
            e = e.touches[0];
          }
          if (e.pageX === Mouse.x || e.pageY === Mouse.y) {
            return;
          }
          Mouse.x = ~~(e.pageX - window.innerWidth / 2);
          Mouse.y = ~~(e.pageY - window.innerHeight / 2);
          Mouse.points.unshift({
            x: Mouse.x,
            y: Mouse.y
          });
          if (Mouse.points.length > 30) {
            Mouse.points.pop();
          }
          Mouse.xs = (Mouse.x + Mouse.xb) * 0.5;
          Mouse.ys = (Mouse.y + Mouse.yb) * 0.5;
          Mouse.xb = Mouse.x;
          return Mouse.yb = Mouse.y;
        }
      }
    };
    window.addEventListener('mousedown', Mouse.events.down, false);
    window.addEventListener('mouseup', Mouse.events.up, false);
    window.addEventListener('mousemove', Mouse.events.move, false);
    window.addEventListener('touchstart', Mouse.events.down, false);
    window.addEventListener('touchend', Mouse.events.up, false);
    return window.addEventListener('touchmove', Mouse.events.move, false);
  };

  initCanvas = function() {
    window.canvas = document.getElementById('canvas');
    window.ctx = canvas.getContext('2d');
    window.b_canvas = document.createElement('canvas');
    window.b_ctx = b_canvas.getContext('2d');
    sizeCanvasesToWindow();
    return window.addEventListener('resize', sizeCanvasesToWindow, false);
  };

  sizeCanvasesToWindow = function(event, zoom) {
    var canvasCopy, contextCopy, d, e, g, height, oh, ow, w, width;
    if (zoom == null) {
      zoom = 1;
    }
    resetContextOrigin(ctx);
    w = window;
    d = document;
    e = d.documentElement;
    g = d.getElementsByTagName('body')[0];
    width = w.innerWidth || e.clientWidth || g.clientWidth;
    height = w.innerHeight || e.clientHeight || g.clientHeight;
    ow = canvas.width;
    oh = canvas.height;
    canvasCopy = document.createElement('canvas');
    contextCopy = canvasCopy.getContext('2d');
    canvasCopy.width = ow;
    canvasCopy.height = oh;
    contextCopy.drawImage(canvas, 0, 0);
    sizeCanvas(canvas, width / zoom, height / zoom);
    ctx.drawImage(canvasCopy, 0, 0, width / zoom, height / zoom);
    canvas.style.zoom = zoom;
    canvas.style.MozTransformOrigin = "0 0";
    canvas.style.MozTransform = "scale(" + zoom + ", " + zoom + ")";
    centerContextOrigin(ctx);
    return imageSmoothing(ctx, !config.smoothing);
  };

  sizeCanvas = function(canvas, width, height) {
    canvas.w_FLOAT = width;
    canvas.h_FLOAT = height;
    canvas.width = width;
    canvas.height = height;
    canvas.top = -height / 2;
    canvas.right = width / 2;
    canvas.bottom = height / 2;
    return canvas.left = -width / 2;
  };

  centerContextOrigin = function(context) {
    context.restore();
    context.translate(context.canvas.w_FLOAT / 2, context.canvas.h_FLOAT / 2);
    return context.save();
  };

  resetContextOrigin = function(context) {
    context.restore();
    context.translate(context.canvas.left, context.canvas.top);
    return context.save();
  };

  hsla = function(h, s, l, a) {
    if (h == null) {
      h = 0;
    }
    if (s == null) {
      s = 100;
    }
    if (l == null) {
      l = 50;
    }
    if (a == null) {
      a = 1;
    }
    h = h % 360;
    s = Math.min(Math.max(s, 0), 100);
    l = Math.min(Math.max(l, 0), 100);
    a = Math.min(Math.max(a, 0), 1);
    return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
  };

  clear = function(context) {
    var canvas;
    canvas = context.canvas;
    return context.clearRect(canvas.left, canvas.top, canvas.width, canvas.height);
  };

  imageSmoothing = function(context, a) {
    if (context == null) {
      context = ctx;
    }
    if (a == null) {
      a = false;
    }
    context.webkitImageSmoothingEnabled = a;
    context.mozImageSmoothingEnabled = a;
    return context.imageSmoothingEnabled = a;
  };

  decay = function(context, hor, ver, hspread, vspread, r) {
    var dh, dw, dx, dy;
    if (hor == null) {
      hor = 0;
    }
    if (ver == null) {
      ver = 0;
    }
    if (hspread == null) {
      hspread = 0;
    }
    if (vspread == null) {
      vspread = 0;
    }
    if (r == null) {
      r = 0;
    }
    dx = context.canvas.left - hspread / 2;
    dy = context.canvas.top - vspread / 2;
    dw = context.canvas.width + hspread;
    dh = context.canvas.height + vspread;
    context.save();
    context.translate(hor, ver);
    if (r !== 0) {
      context.rotate(r);
    }
    context.globalAlpha = 0.5;
    context.drawImage(context.canvas, dx, dy, dw, dh);
    return context.restore();
  };

  tilt = function(a) {
    var d, n;
    if (a == null) {
      a = 40;
    }
    n = Mouse.xs / canvas.width;
    d = canvas.height / Mouse.ys * a;
    return n / d;
  };

  startAnimation = function(e) {
    ctx.fillStyle = 'black';
    ctx.fillRect(canvas.left, canvas.top, canvas.width, canvas.height);
    animloop();
    return img.removeEventListener('load', startAnimation, false);
  };

  initImage = function() {
    window.img = new Image();
    img.src = './img/eyesblueorange2.jpg';
    img.addEventListener('load', initWallpaper, false);
    img.addEventListener('load', startAnimation, false);
    window.addEventListener('resize', initWallpaper, false);
    window.addEventListener('orientationchange', initWallpaper, false);
    window.img_canvas = document.createElement('canvas');
    return window.img_context = img_canvas.getContext('2d');
  };

  keyPress = function(e) {
    console.log(e.charCode);
    if (e.charCode === 49) {
      img.src = './img/eyesblack2.jpg';
    }
    if (e.charCode === 50) {
      img.src = './img/eyesbluegold2.jpg';
    }
    if (e.charCode === 51) {
      img.src = './img/eyesblueorange2.jpg';
    }
    if (e.charCode === 52) {
      return img.src = './img/eyesred2.jpg';
    }
  };

  window.addEventListener('keypress', keyPress, false);

  initWallpaper = function() {
    var i, j, _i, _j, _ref, _ref1, _ref2, _ref3;
    sizeCanvas(img_canvas, img.width * Math.ceil(canvas.width / img.width + 1), img.height * Math.ceil(canvas.height / img.height + 1));
    for (j = _i = 0, _ref = img_canvas.height, _ref1 = img.height; _ref1 > 0 ? _i <= _ref : _i >= _ref; j = _i += _ref1) {
      for (i = _j = 0, _ref2 = img_canvas.width, _ref3 = img.width; _ref3 > 0 ? _j <= _ref2 : _j >= _ref2; i = _j += _ref3) {
        img_context.drawImage(img, i, j);
      }
    }
    return img_canvas;
  };

  initBrush = function() {
    var grad, r0, r1, size, x0, x1, y0, y1;
    window.brush_canvas = document.createElement('canvas');
    window.brush_ctx = brush_canvas.getContext('2d');
    size = hypotenuse(canvas.width, canvas.height);
    sizeCanvas(brush_canvas, size, size);
    x0 = size / 2;
    y0 = size / 2;
    r0 = 0;
    x1 = size / 2;
    y1 = size / 2;
    r1 = size / 2;
    grad = brush_ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
    grad.addColorStop(0, hsla(120, 100, 50, 1));
    grad.addColorStop(1, hsla(120, 100, 50, 0));
    return brush_ctx.fillStyle = grad;
  };

  window.bloops = [];

  Bloop = (function() {
    function Bloop(x, y, age, death) {
      this.x = x;
      this.y = y;
      this.age = age;
      this.death = death;
    }

    Bloop.prototype.draw = function(context) {
      var alpha, hue, sat;
      if (this.age > (context.canvas.width + context.canvas.height)) {
        return;
      }
      context.lineWidth = (sin(this.age / this.death * 25) * 0.4 + 0.5) * (1 - this.age / this.death);
      context.beginPath();
      context.arc(this.x, this.y, this.age + sin(this.age / this.death * Math.PI * 4) * 10, 0, Math.PI * 2, false);
      context.closePath();
      hue = this.age / this.death * 360 + (Date.now() / this.death % 360);
      sat = 100 - this.age / this.death * 100;
      alpha = (sin(this.age / this.death * Math.PI * 8) * 0.1 + 0.2) * (1 - this.age / this.death);
      context.strokeStyle = 'black';
      context.stroke();
      return this.age++;
    };

    return Bloop;

  })();

  paintimg = function(x, y) {
    var dh, dw, dx, dy, i, new_x, new_y, random_seed, sh, size, sw, sx, sy, _i, _ref;
    size = hypotenuse(canvas.width, canvas.height);
    brush_ctx.clearRect(0, 0, size, size);
    brush_ctx.globalCompositeOperation = 'source-over';
    random_seed = 0;
    new_x = Mouse.x + brush_canvas.width / 2;
    new_y = Mouse.y + brush_canvas.height / 2;
    if (Mouse.down) {
      bloops.push(new Bloop(new_x, new_y, 0, size / 2));
    }
    if (Date.now() % (90 + random_seed) === 0) {
      new_x = (Math.random() - 0.5) * canvas.width + brush_canvas.width / 2;
      new_y = (Math.random() - 0.5) * canvas.height + brush_canvas.height / 2;
      bloops.push(new Bloop(new_x, new_y, 0, size / 2));
      random_seed = (Math.random() * 0.5) * 20 | 0;
    }
    if (bloops.length > 0) {
      for (i = _i = 0, _ref = bloops.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        bloops[i].draw(brush_ctx);
      }
      if (bloops[0].age > bloops[0].death || bloops.length > (180 / ((60 / fps * 10 | 0) / 10))) {
        bloops.shift();
      }
    }
    sx = (x + canvas.right + size) % img.width;
    sy = ~~(y + canvas.bottom + size) % img.height;
    sw = size;
    sh = size;
    dx = 0;
    dy = 0;
    dw = sw;
    dh = sh;
    brush_ctx.globalCompositeOperation = 'source-in';
    brush_ctx.drawImage(img_canvas, sx, sy, sw, sh, dx, dy, dw, dh);
    return ctx.drawImage(brush_canvas, x - size / 2, y - size / 2);
  };

  fps = 0;

  fps_now = null;

  lastUpdate = Date.now() * 1 - 1;

  fpsFilter = 50;

  zoom = 1;

  last_zoom = 1;

  zoomed_count = 0;

  window.addEventListener('resize', (function() {
    return zoomed_count = 0;
  }), false);

  window.addEventListener('onorientationchange', (function() {
    return zoomed_count = 0;
  }), false);

  animloop = function() {
    var counter, m_adjust, offset, rotate, spread, thisFrameFPS, x, y;
    requestAnimationFrame(animloop);
    thisFrameFPS = 1000 / ((fps_now = Date.now()) - lastUpdate);
    fps += (thisFrameFPS - fps) / fpsFilter;
    lastUpdate = fps_now;
    imageSmoothing(ctx, true);
    time++;
    if (Mouse.down) {
      Mouse.downTime++;
    }
    spread = 0;
    m_adjust = -1;
    x = Mouse.xs / canvas.width * m_adjust;
    y = Mouse.ys / canvas.height * m_adjust;
    rotate = 0;
    decay(ctx, x, y, spread, spread, rotate);
    counter = time % 300;
    offset = 10;
    return paintimg(Mouse.xs / canvas.width * offset, Mouse.ys / canvas.height * offset);
  };

  initConfig = function() {
    var Configuration;
    Configuration = function() {
      return {
        clear: function() {
          clear(ctx);
          return clear(b_ctx);
        },
        smoothing: false,
        o_alpha: 1,
        size: 6,
        f_sens: 0.5,
        m_sens: -2,
        spread: 0,
        r2a: 0,
        r2b: 0,
        r2c: -3,
        r2d: -9,
        r_tweak: 0,
        brush_size: 200
      };
    };
    return window.config = new Configuration();
  };

  handleResize = function() {
    sizeCanvasesToWindow();
    initWallpaper();
    return initBrush();
  };

  window.addEventListener('resize', handleResize, false);

  window.addEventListener('orientationchange', handleResize, false);

  window.onload = function() {
    initConfig();
    initImage();
    initCanvas();
    ctx.fillStyle = 'hsla(0,0%,90%,0.8)';
    ctx.fillText('Loading...', 0, 0);
    initBrush();
    return initMouse();
  };

}).call(this);

/*
//@ sourceMappingURL=04.map
*/
